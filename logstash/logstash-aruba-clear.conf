# (C) CICS UMass Amherst - cecchet@cs.umass.edu
# Logstash configuration file reading clear (unencrypted) ARUBA syslog data from a directory
# Messages are parsed, session durations are computed and sent to Elasticsearch for storage

input {
#  beats {
#    port => "5044"
#  }

#
# If you don't want to use Beats, comment the section above and uncomment the block below.
# It will read files directly from the given directory and DELETE the files after they are being processed
#
  file {
    path => "C:\tmp\syslog*"
    start_position => "beginning"
    mode => "read"
    sincedb_path => "/dev/null"
    exit_after_read => "true"
    file_sort_by => "path"
    file_sort_direction => "asc"
    file_completed_action => "delete"
  }

}

filter {
  # Description of Aruba syslog messages can be found at:
  # https://www.arubanetworks.com/techdocs/Instant_42_WebHelp/Content/Aruba%20Instant%206.4.3.x-4.2%20Syslog%20Messages%20Reference%20Guide.pdf

  translate {
    field => "[message]"
    destination => "[matched]"
    dictionary => [ "<501044>", "true",
    "<501098>", "true",
    "<501080>", "true",
    "<501081>", "true",
    "<501106>", "true",
    "<501009>", "true",
    "<501110>", "true",
    "<501111>", "true",
    "<501093>", "true",
    "<501094>", "true",
    "<501099>", "true",
    "<501109>", "true",
    "<501101>", "true",
    "<501102>", "true",
    "<501104>", "true",
    "<501112>", "true",
    "<501113>", "true",
    "<501100>", "true",
    "<501107>", "true",
    "<501108>", "true",
    "<501114>", "true",
    "<501117>", "true",
    "<501126>", "true",
    "<501129>", "true",
    "<501130>", "true",
    "<501128>", "true",
    "<501105>", "true",
    "<501118>", "true",
    "<501119>", "true",
    "<501120>", "true",
    "<501121>", "true",
    "<501122>", "true",
    "<501123>", "true",
    "<501124>", "true",
    "<501125>", "true",
    "<501127>", "true",
    "<501130>", "true",
    "<501082>", "true",
    "<501085>", "true",
    "<501090>", "true",
    "<501095>", "true",
    "<501097>", "true",
    "<501092>", "true",
    "<501084>", "true",
    "<501087>", "true",
    "<501088>", "true",
    "<501089>", "true",
    "<522008>", "true"]
    exact => true
    regex => true
  }

  # List of messages that we have not seen in our traces and for which we did not implement parsing
  translate {
    field => "[message]"
    destination => "[to_be_implemented]"
    dictionary => [ "<501044>", "true",
    "<501082>", "true",
    "<501084>", "true",
    "<501085>", "true",
    "<501087>", "true",
    "<501088>", "true",
    "<501089>", "true",
    "<501090>", "true",
    "<501092>", "true",
    "<501097>", "true",
    "<501094>", "true",
    "<501099>", "true",
    "<501098>", "true",
    "<501009>", "true",
    "<501101>", "true",
    "<501104>", "true",
    "<501107>", "true",
    "<501108>", "true",
    "<501109>", "true",
    "<501110>", "true",
    "<501111>", "true",
    "<501112>", "true",
    "<501113>", "true",
    "<501114>", "true",
    "<501117>", "true",
    "<501118>", "true",
    "<501119>", "true",
    "<501120>", "true",
    "<501121>", "true",
    "<501122>", "true",
    "<501123>", "true",
    "<501124>", "true",
    "<501125>", "true",
    "<501126>", "true",
    "<501127>", "true",
    "<501128>", "true",
    "<501129>", "true",
    "<501130>", "true"]
    exact => true
    regex => true
  }

  # Generic SYSLOG extraction for messages that don't have specific parsing implemented
  if [to_be_implemented] == "true" {
    mutate {
      add_field => {
        "event_type" => "to_be_implemented"
      }
    }
    grok {
      match => {
        "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:source_name} %{DATA:process}(?:\[%{POSINT:pid}\])?: \<%{INT:msg_code}\> %{GREEDYDATA:message}"
      }
      overwrite => [ "message" ]
    }
  }
  else if [matched] == "true" {
    if "<501080>" in [message] or "<501081>" in [message] or "<501106>" in [message] { # no 501081 in trace so far
      # Deauth to sta: [mac:%m]: Ageout AP [ip:%P]-[bssid:%m]-[name:%s] [reason:%s]
      #
      # Example: 
      # Jun  3 01:02:32 lgrc-wac-106-12 stm[4105]: <501080> <5753> <NOTI> <lgrc-wac-106-12 *Rv50iCb0qXcLairlXGI38w*>  Deauth to sta: #9xcvk.sWLu603Wj5Qzoq2A#: Ageout AP *i71XFd5IpPE7MiP14CVtZY*-#INrVRcFwNTA/liNH2pUA2A#-ANIM-115-1 APAE Disconnect
      # Jun  3 01:02:32 lgrc-wac-106-12 stm[4105]: <501106> <5753> <NOTI> <lgrc-wac-106-12 *Rv50iCb0qXcLairlXGI38w*>  Deauth to sta: #9xcvk.sWLu603Wj5Qzoq2A#: Ageout AP *i71XFd5IpPE7MiP14CVtZY*-#INrVRcFwNTA/liNH2pUA2A#-ANIM-115-1 wifi_deauth_sta
      # Output:
      # {
      #   "controller_ip": "Rv50iCb0qXcLairlXGI38w",
      #   "process": "stm",
      #   "error_level": "NOTI",
      #   "controller": "lgrc-wac-106-12",
      #   "ap_bssid": "INrVRcFwNTA/liNH2pUA2A",
      #   "ap_ip": "i71XFd5IpPE7MiP14CVtZY",
      #   "pid": "4105",
      #   "message": "APAE Disconnect",
      #   "mac": "9xcvk.sWLu603Wj5Qzoq2A",
      #   "msg_code": "501080",
      #   "pid2": "5753",
      #   "name": "ANIM-115-1",
      #   "source_name": "lgrc-wac-106-12",
      #   "timestamp": "Jun  3 01:02:32"
      # }
      mutate {
        add_field => {
          "event_type" => "disassociation"
        }
      }
      grok {
        break_on_match => false
        match => {
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:source_name} %{DATA:process}(?:\[%{POSINT:pid}\])?: \<%{INT:msg_code}\> \<%{POSINT:pid2}\> \<%{DATA:error_level}\> \<%{DATA:controller} %{DATA:controller_ip}\> %{SPACE}*Deauth to sta?: %{DATA:mac}?: Ageout AP %{DATA:ap_ip}-%{DATA:ap_bssid}-%{DATA:ap_name} %{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
      }
    }
    else if "<501093>" in [message] {
      # Auth success: [mac:%m]: AP [ip:%P]-[bssid:%m]-[name:%s]
      #
      # Example: 
      # Mar  5 13:02:26 *i71XFd5IpPEfy54aXlSlQI* stm[6035]: <501093> <NOTI> |AP 380RUS-212-1@*i71XFd5IpPEfy54aXlSlQI* stm|  Auth success: #4gSi3SqEV2c.2Z2tlIFTdE#: AP *i71XFd5IpPEfy54aXlSlQI*-#yy4t5npYv4MmsCD7m0l7Js#-380RUS-212-1
      # Output:
      # {
      #   "process": "stm",
      #   "error_level": "NOTI",
      #   "mac": "4gSi3SqEV2c.2Z2tlIFTdE",
      #   "pid": "6035",
      #   "message": "Reason STA has left and is disassociate",
      #   "ap_bssid": "yy4t5npYv4MmsCD7m0l7Js",
      #   "msg_code": "501093",
      #   "ap_name": "380RUS-212-1",
      #   "ap_ip": "i71XFd5IpPEfy54aXlSlQI",
      #   "source_name": "i71XFd5IpPEfy54aXlSlQI",
      #   "timestamp": "Mar  5 13:02:26"
      # }
      mutate {
        add_field => {
          "event_type" => "association"
        }
      }
      grok {
        break_on_match => false
        match => {
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:source_name} %{DATA:process}(?:\[%{POSINT:pid}\])?: \<%{INT:msg_code}\> \<%{DATA:error_level}\> \|AP %{DATA} stm\|%{SPACE}*Auth success?: %{DATA:mac}?: AP %{DATA:ap_ip}-%{DATA:ap_bssid}-%{GREEDYDATA:ap_name}"
        }
        overwrite => [ "message" ]
      }
    }
    else if "<501095>" in [message] {
      # Assoc request @ [tstr:%s]: [mac:%m] (SN [sn:%d]): AP [ip:%P]-[bssid:%m]-[name:%s]
      #
      # Example: 
      # Mar  5 12:47:39 *i71XFd5IpPEfy54aXlSlQI* stm[6035]: <501095> <NOTI> |AP 380RUS-212-1@*i71XFd5IpPEfy54aXlSlQI* stm|  Assoc request @ 12:47:39.915995: #4gSi3SqEV2c.2Z2tlIFTdE# (SN 1659): AP *i71XFd5IpPEfy54aXlSlQI*-#yy4t5npYv4MmsCD7m0l7Js#-380RUS-212-1
      # Output:
      # {
      #   "process": "stm",
      #   "error_level": "NOTI",
      #   "mac": "4gSi3SqEV2c.2Z2tlIFTdE",
      #   "pid": "6035",
      #   "message": "Reason STA has left and is disassociate",
      #   "ap_bssid": "yy4t5npYv4MmsCD7m0l7Js",
      #   "msg_code": "501095",
      #   "ap_name": "380RUS-212-1",
      #   "assoc_time": "12:47:39.915995",
      #   "sn": "1659",
      #   "ap_ip": "i71XFd5IpPEfy54aXlSlQI",
      #   "source_name": "i71XFd5IpPEfy54aXlSlQI",
      #   "timestamp": "Mar  5 12:47:39"
      # }
      mutate {
        add_field => {
          "event_type" => "association"
        }
      }
      grok {
        break_on_match => false
        match => {
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:source_name} %{DATA:process}(?:\[%{POSINT:pid}\])?: \<%{INT:msg_code}\> \<%{DATA:error_level}\> \|AP %{DATA} stm\|%{SPACE}*Assoc request \@ %{DATA:assoc_time}?: %{DATA:mac} \(SN %{INT:sn}\): AP %{DATA:ap_ip}-%{DATA:ap_bssid}-%{GREEDYDATA:ap_name}"
        }
        overwrite => [ "message" ]
      }
    }
    else if "<501100>" in [message] {
      # Assoc success @ [tstr:%s]: [mac:%m]: AP [ip:%P]-[bssid:%m]-[name:%s]
      #
      # Example: 
      # Jun  3 01:02:31 lgrc-wac-106-12 stm[4105]: <501100> <4105> <NOTI> <lgrc-wac-106-12 *Rv50iCb0qXcLairlXGI38w*>  Assoc success @ 01:02:31.765562: #.gwVFvOEEegdm2bB1k608w#: AP *i71XFd5IpPEwi94h5N/pfg*-#DQHK5me.4w2ZvojHR8Kxr.#-MAIN-106-1
      # Output:
      # {
      #   "controller_ip": "Rv50iCb0qXcLairlXGI38w",
      #   "process": "stm",
      #   "error_level": "NOTI",
      #   "controller": "lgrc-wac-106-12",
      #   "mac": ".gwVFvOEEegdm2bB1k608w",
      #   "pid": "4105",
      #   "ap_bssid": "DQHK5me.4w2ZvojHR8Kxr.",
      #   "msg_code": "501100",
      #   "ap_name": "",
      #   "pid2": "4105",
      #   "assoc_time": "01:02:31.765562",
      #   "ap_ip": "i71XFd5IpPEwi94h5N/pfg",
      #   "source_name": "lgrc-wac-106-12",
      #   "timestamp": "Jun  3 01:02:31"
      # }
      mutate {
        add_field => {
          "event_type" => "association"
        }
      }
      grok {
        break_on_match => false
        match => {
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:source_name} %{DATA:process}(?:\[%{POSINT:pid}\])?: \<%{INT:msg_code}\> \<%{POSINT:pid2}\> \<%{DATA:error_level}\> \<%{DATA:controller} %{DATA:controller_ip}\> %{SPACE}*Assoc success \@ %{DATA:assoc_time}?: %{DATA:mac}?: AP %{DATA:ap_ip}\-#%{DATA:ap_bssid}#-%{GREEDYDATA:ap_name}"
        }
        overwrite => [ "message" ]
      }
    }
    else if "<501102>" in [message] {
      # Disassoc from sta: [mac:%m]: AP [ip:%P]-[bssid:%m]-[name:%s] Reason [reason_code:%s]
      #
      # Example: 
      # Mar  5 13:00:34 *i71XFd5IpPEfy54aXlSlQI* stm[6035]: <501102> <NOTI> |AP 380RUS-212-1@*i71XFd5IpPEfy54aXlSlQI* stm|  Disassoc from sta: #4gSi3SqEV2c.2Z2tlIFTdE#: AP *i71XFd5IpPEfy54aXlSlQI*-#yy4t5npYv4MmsCD7m0l7Js#-380RUS-212-1 Reason STA has left and is disassociate
      # Output:
      # {
      #   "process": "stm",
      #   "error_level": "NOTI",
      #   "mac": "4gSi3SqEV2c.2Z2tlIFTdE",
      #   "pid": "6035",
      #   "message": "Reason STA has left and is disassociate",
      #   "ap_bssid": "yy4t5npYv4MmsCD7m0l7Js",
      #   "msg_code": "501102",
      #   "ap_name": "380RUS-212-1",
      #   "ap_ip": "i71XFd5IpPEfy54aXlSlQI",
      #   "source_name": "i71XFd5IpPEfy54aXlSlQI",
      #   "timestamp": "Mar  5 13:00:34"
      # }
      mutate {
        add_field => {
          "event_type" => "disassociation"
        }
      }
      grok {
        break_on_match => false
        match => {
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:source_name} %{DATA:process}(?:\[%{POSINT:pid}\])?: \<%{INT:msg_code}\> \<%{DATA:error_level}\> \|AP %{DATA} stm\|%{SPACE}*Disassoc from sta?: %{DATA:mac}?: AP %{DATA:ap_ip}-%{DATA:ap_bssid}-%{DATA:ap_name} %{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
      }
    }
    else if "<501105>" in [message] {
      # Deauth from sta: [mac:%m]: AP [ip:%P]-[bssid:%m]-[name:%s] Reason [reason_code:%s]
      #
      # Example: 
      # Jul 28 16:08:56 2020 stm[1787]: <501105> <NOTI> |AP ap01hilli-2-cmn.itha.ny@10.0.6.106More Information stm| Deauth from sta: 20:f8:5e:f4:44:0d: AP 10.0.6.106More Information-40:e3:d6:e3:74:61-ap01hilli-2-cmn.itha.ny Reason STA has left and is deauthenticated
      # Output:
      # {
      #   "process": "stm",
      #   "error_level": "NOTI",
      #   "mac": "4gSi3SqEV2c.2Z2tlIFTdE",
      #   "pid": "6035",
      #   "message": "Reason AAA Deauthenticate",
      #   "ap_bssid": "yy4t5npYv4MmsCD7m0l7Js",
      #   "msg_code": "501105",
      #   "ap_name": "380RUS-212-1",
      #   "ap_ip": "i71XFd5IpPEfy54aXlSlQI",
      #  "source_name": "i71XFd5IpPEfy54aXlSlQI",
      #   "timestamp": "Mar  5 12:53:05"
      # }
      mutate {
        add_field => {
          "event_type" => "disassociation"
        }
      }
      grok {
        break_on_match => false
        match => {
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:source_name} %{DATA:process}(?:\[%{POSINT:pid}\])?: \<%{INT:msg_code}\> \<%{DATA:error_level}\> \|AP %{DATA} stm\|%{SPACE}*Deauth from sta?: %{DATA:mac}?: AP %{DATA:ap_ip}-%{DATA:ap_bssid}-%{DATA:ap_name} %{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
      }
    }
    else if "<522008>" in [message] {
      # User Authentication Successful: username=[name:%s] MAC=[mac:%s] IP=[ip:%s] role=[r:%s] VLAN=[vlan:%d] AP=[ap:%s] SSID=[ssid:%s] AAA profile=[aaa:%s] auth method=[am:%s] auth server=[as:%s]
      #
      # Example: 
      # Jul 28 16:08:56 2020 7200-NH-L1 authmgr[4134]: <522008> <4134> <NOTI> <7200-NH-L1 172.23.7.10>  User Authentication Successful: username=abcd MAC=cc:44:cc:bb:90:33 IP=10.13.17.26 role=R-QU-ITStaff VLAN=116 AP=NH4ParkingGarageStorage_AP2 SSID=BobcatNet AAA profile=NH-BobcatNet-aaa-prof auth method=802.1x auth server=na-boxster-nh.quinnipiac.edu
      # Output:
      # {
      #   "controller_ip": "Rv50iCb0qXcLairlXGI38w",
      #   "user_ip": "tty/q.2BxdUABEeLBGroDY",
      #   "process": "authmgr",
      #   "error_level": "NOTI",
      #   "controller": "lgrc-wac-106-12",
      #   "role": "authenticated-802.1x-facstaff",
      #   "user_name": "eAaP.jdngPo",
      #   "pid": "4099",
      #   "aaa_profile": "EDUROAM_clearpass4-5",
      #   "ssid": "eduroam",
      #   "msg_code": "522008",
      #   "ap_name": "MAIN-106-1",
      #   "auth_method": "802.1x",
      #   "pid2": "4099",
      #   "vlan": "929",
      #   "mac": ".gwVFvOEEegdm2bB1k608w",
      #   "auth_server": "clearpass4",
      #   "source_name": "lgrc-wac-106-12",
      #   "timestamp": "Jun  3 01:02:31"
      # }
      mutate {
        add_field => {
          "event_type" => "association"
        }
      }
      grok {
        break_on_match => false
        match => {
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:source_name} %{DATA:process}(?:\[%{POSINT:pid}\])?: \<%{INT:msg_code}\> \<%{POSINT:pid2}\> \<%{DATA:error_level}\> \<%{DATA:controller} %{DATA:controller_ip}\>  User Authentication Successful: username=%{DATA:user_name} MAC=%{DATA:mac} IP=%{DATA:user_ip} role=%{DATA:role} VLAN=%{INT:vlan} AP=%{DATA:ap_name} SSID=%{DATA:ssid} AAA profile=%{DATA:aaa_profile} auth method=%{DATA:auth_method} auth server=%{GREEDYDATA:auth_server}"
        }
        overwrite => [ "message" ]
      }
    }

    # If we have a malformed message, we still want to insert the correct timestamp so that continuous transforms can work properly
    if "_grokparsefailure" in [tags] {
      mutate {
        add_field => {
          "event_type" => "parse_error"
        }
      }
      grok {
        match => {
          "message" => "%{SYSLOGTIMESTAMP:timestamp} %{GREEDYDATA:message}"
        }
      }
    }
    
    # AP naming convention in effect here
    # Extract building name / room name / ap number from the ap_name string
    if ([ap_name]) {
      grok {
        match => { "ap_name" => "%{DATA:building}-%{DATA:room}-%{GREEDYDATA:ap_number}" }
      }
    }
    
    if ([room]) {
      # Floor number parsing
      grok {
        break_on_match => true
        # Extract floor number from room name, either first 2 digits of a 4 digit number or first digit of 3 digit number, 1ST/2ND/3RD/4TH/.../9TH
        match => {
          "room" => ["\D*(?<floor>\d{2})\d{2}\D?\z", "\D*(?<floor>\d{1})\d{2}\D?\z","(?<floor>\d{1})ST","(?<floor>\d{1})ND","(?<floor>\d{1})RD","(?<floor>\d{1})TH"]
        }
      }
      # Deal with single/double digit room numbers
      if [room] =~  /^\D*[0-9]{1,2}\D?$/ {
        mutate {
          add_field => {
            "floor" => 0
          }
        }
      }
      # Any floor starting with BASE (like BASEMENT) is set to -1
      if [room] =~ /^BASE\D*$/ {
        mutate {
          add_field => {
            "floor" => -1
          }
        }
      }
    }

    # Make sure the timestamp is set to the date of the logs and not the current time of parsing
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }

    # Aggregate sessions
    if ([mac]) {
      if [event_type] == "association" {
        aggregate {
          timeout_timestamp_field => "@timestamp" # Use timestamps from the log instead of current time to compute timeouts
          task_id => "%{mac}%{ap_name}"
          code => "
            map['sessions'] ||= 0
            map['sessions'] += 1
            map['start'] ||= event.get('@timestamp')
            map['ap_name'] = event.get('ap_name')
            map['mac'] = event.get('mac')
            map['building'] = event.get('building')
            map['floor'] = event.get('floor')
            map['user_name'] = event.get('user_name')
          "
          #map_action => "create_or_update" # if the map was already created (we already had a start time, we won't update it and keep the first occurence but sessions number will be increased)
          timeout => 21600  # Session will be considered finished 6 hours after the first event
          push_map_as_event_on_timeout => true # We will push a new event on timeout
          timeout_tags => ['session_timeout']
          timeout_code => "
            event.set('end',event.get('start')+21600)
            event.set('duration',21600)
            event.set('@timestamp',event.get('end'))
          "
        }
      }
      else if [event_type] == "disassociation" {
        aggregate {
          code => "
              map['start'] ||= event.get('@timestamp') # If there is no start, initialize it to the current timestamp (duration will be zero)
              map['sessions'] ||= 0
              event.set('start', map['start'])
              event.set('end',event.get('@timestamp'))
              event.set('duration',event.get('@timestamp')-map['start'])
              event.set('sessions',map['sessions'])
              event.set('user_name',map['user_name'])
          "
          task_id => "%{mac}%{ap_name}"
          map_action => "create_or_update"
          end_of_task => true
        }
      }
    }

    # Remove uncessary fields
    mutate {
      remove_field => [ "agent", "ecs", "host", "input", "matched" ]
    }
  }
  else {
    drop { }
  }
}

output {
  # stdout { codec => rubydebug }
  elasticsearch {
    index => "covid"
    hosts => "localhost:9200"
  }
}

